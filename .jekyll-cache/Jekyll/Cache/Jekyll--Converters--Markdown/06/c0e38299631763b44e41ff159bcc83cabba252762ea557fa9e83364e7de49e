I"`<blockquote>
  <p>아래 URL 의 정보를 보기 내가 보기에 편하게 옮겨 적은 글</p>
</blockquote>

<h2 id="참고">참고</h2>

<ul>
  <li>원문 <a href="http://es6-features.org/#DefaultParameterValues">ECMAScript 6 — New Features: Overview &amp; Comparison</a></li>
  <li><a href="https://isme2n.github.io/devlog/2017/04/28/es6/">번역1</a></li>
  <li><a href="https://isme2n.github.io/devlog/2017/04/29/es6-2/">번역2</a></li>
  <li><a href="https://isme2n.github.io/devlog/2017/05/03/es6-3/">번역3</a></li>
</ul>

<ol>
  <li>
    <p>const</p>

    <ul>
      <li>Constants</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.141593</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>scope</p>

    <ul>
      <li>Block-Scoped Variables
        <ul>
          <li>Block-scoped variables (and constants) without hoisting.</li>
        </ul>
      </li>
      <li>Block-Scoped Functions
        <ul>
          <li>Block-scoped function definitions.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>arrow function</p>

    <ul>
      <li>Expression Bodies
        <ul>
          <li>More expressive closure syntax
            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">map</span><span class="p">(</span><span class="nx">v</span> <span class="o">=&gt;</span> <span class="nx">v</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>Statement Bodies
        <ul>
          <li>More expressive closure syntax</li>
        </ul>
      </li>
      <li>Lexical this
        <ul>
          <li>More intuitive handling of current object context.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Extended Parameter Handling</p>

    <ul>
      <li><a href="http://es6-features.org/#DefaultParameterValues">Default Parameter Values</a></li>
      <li><a href="http://es6-features.org/#RestParameter">Rest Parameter</a></li>
      <li><a href="http://es6-features.org/#SpreadOperator">Spread Operator</a></li>
    </ul>
  </li>
  <li>
    <p>Template Literals</p>

    <ul>
      <li>String Interpolation</li>
      <li>Custom Interpolation</li>
      <li>Raw String Access</li>
    </ul>
  </li>
  <li>
    <p>Extended Literals</p>

    <ul>
      <li>Binary &amp; Octal Literal</li>
      <li>Unicode String &amp; RegExp Literal</li>
    </ul>
  </li>
  <li>
    <p>Enhanced Regular Expression</p>

    <ul>
      <li>Regular Expression Sticky Matching</li>
    </ul>
  </li>
  <li>
    <p>Enhanced Object Properties</p>

    <ul>
      <li>Property Shorthand</li>
      <li>Computed Property Names</li>
      <li>Method Properties</li>
    </ul>
  </li>
  <li>
    <p>Destructuring Assignment</p>

    <ul>
      <li>Array Matching</li>
      <li>Object Matching, Shorthand Notation</li>
      <li>Object Matching, Deep Matching</li>
      <li>Object And Array Matching, Default Values</li>
      <li>Parameter Context Matching</li>
      <li>Fail-Soft Destructuring</li>
    </ul>
  </li>
  <li>
    <p>Modules</p>

    <ul>
      <li>Value Export/Import</li>
      <li>Default &amp; Wildcard</li>
    </ul>
  </li>
  <li>
    <p>Classes</p>

    <ul>
      <li>Class Definition
        <ul>
          <li>More intuitive, OOP-style and boilerplate-free classes.</li>
        </ul>
      </li>
      <li>Class Inheritance
        <ul>
          <li>More intuitive, OOP-style and boilerplate-free inheritance.</li>
        </ul>
      </li>
      <li>Class Inheritance, From Expressions</li>
      <li>Base Class Access
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">super</span><span class="p">.</span><span class="nx">xxx</span>
</code></pre></div>        </div>
      </li>
      <li>Static Members</li>
      <li>Getter/Setter</li>
    </ul>
  </li>
  <li>Symbol Type
    <ul>
      <li>Symbol Type
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">Symbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span> <span class="o">!==</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">()</span>
  <span class="k">typeof</span> <span class="nx">foo</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">symbol</span><span class="dl">'</span>
  <span class="k">typeof</span> <span class="nx">bar</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">symbol</span><span class="dl">'</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">foo</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span>
  <span class="nx">obj</span><span class="p">[</span><span class="nx">bar</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span>
  <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// {}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// []</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// []</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertySymbols</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// [ foo, bar ]</span>
</code></pre></div>        </div>
      </li>
      <li>Global Symbols
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="dl">'</span><span class="s1">app.foo</span><span class="dl">'</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="dl">'</span><span class="s1">app.foo</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Iterators</p>

    <ul>
      <li>Iterator &amp; For-Of Operator</li>
    </ul>
  </li>
  <li>
    <p>Generators</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">yield</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Map/Set &amp; WeakMap/WeakSet</p>

    <ul>
      <li>Set Data-Structure</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">()</span>
<span class="nx">s</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">goodbye</span><span class="dl">'</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">s</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="mi">2</span>
<span class="nx">s</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">)</span> <span class="o">===</span> <span class="kc">true</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">of</span> <span class="nx">s</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="c1">// insertion order</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>Map Data-Structure</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">()</span>
<span class="nx">m</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
<span class="nx">m</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span>
<span class="nx">m</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">===</span> <span class="mi">34</span>
<span class="nx">m</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="mi">2</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">]</span> <span class="k">of</span> <span class="nx">m</span><span class="p">.</span><span class="nx">entries</span><span class="p">())</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> = </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">val</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>Weak-Link Data-Structures
        <ul>
          <li>Memory-leak-free Object-key’d side-by-side data-structures.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Typed Arrays</p>

    <ul>
      <li>Typed Arrays</li>
    </ul>
  </li>
  <li>
    <p>New Built-In Methods</p>

    <ul>
      <li>Object Property Assignment</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">dest</span><span class="p">,</span> <span class="nx">src1</span><span class="p">,</span> <span class="nx">src2</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>Array Element Finding</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">;[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
    <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// 4</span>
    <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)].</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// 2</span>
</code></pre></div>    </div>

    <ul>
      <li>String Repeating</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">foo</span><span class="dl">'</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div>    </div>

    <ul>
      <li>String Searching</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">ello</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// true</span>
<span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">hell</span><span class="dl">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1">// true</span>
<span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">ell</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// true</span>
<span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">ell</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// true</span>
<span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">ell</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">// false</span>
</code></pre></div>    </div>

    <ul>
      <li>Number Type Checking</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Number</span><span class="p">.</span><span class="nb">isNaN</span><span class="p">()</span>
<span class="nb">Number</span><span class="p">.</span><span class="nb">isFinite</span><span class="p">()</span>
</code></pre></div>    </div>

    <ul>
      <li>Number Safety Checking</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Number</span><span class="p">.</span><span class="nx">isSafeInteger</span><span class="p">()</span>
</code></pre></div>    </div>

    <ul>
      <li>Number Comparison</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Number</span><span class="p">.</span><span class="nx">EPSILON</span>
</code></pre></div>    </div>

    <ul>
      <li>Number Truncation</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">trunc</span><span class="p">(</span><span class="mf">42.7</span><span class="p">))</span> <span class="c1">// 42</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">trunc</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span> <span class="c1">// 0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">trunc</span><span class="p">(</span><span class="o">-</span><span class="mf">0.1</span><span class="p">))</span> <span class="c1">// -0</span>
</code></pre></div>    </div>

    <ul>
      <li>Number Sign Determination</li>
    </ul>
  </li>
  <li>
    <p>Promises</p>

    <ul>
      <li>Promise Usage</li>
      <li>Promise Combination</li>
    </ul>
  </li>
  <li>
    <p>Meta-Programming</p>

    <ul>
      <li>Proxying</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Welcome, foo</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Proxy</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="p">{</span>
    <span class="kd">get</span><span class="p">(</span><span class="nx">receiver</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">receiver</span> <span class="p">?</span> <span class="nx">receiver</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">:</span> <span class="s2">`Hello, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span>
    <span class="p">},</span>
<span class="p">})</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">foo</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">Welcome, foo</span><span class="dl">'</span>
<span class="nx">proxy</span><span class="p">.</span><span class="nx">world</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">Hello, world</span><span class="dl">'</span>
</code></pre></div>    </div>

    <ul>
      <li>Reflection</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
<span class="nx">obj</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">Reflect</span><span class="p">.</span><span class="nx">ownKeys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// [ "a", "b", Symbol(c) ]</span>
</code></pre></div>    </div>
  </li>
  <li>Internationalization &amp; Localization
    <ul>
      <li>Collation
        <ul>
          <li>Sorting a set of strings and searching within a set of strings. Collation is parameterized by locale and aware of Unicode.</li>
        </ul>
      </li>
      <li>Number Formatting
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l10nEN</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">NumberFormat</span><span class="p">(</span><span class="dl">'</span><span class="s1">en-US</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">l10nDE</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">NumberFormat</span><span class="p">(</span><span class="dl">'</span><span class="s1">de-DE</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">l10nEN</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="mf">1234567.89</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">1,234,567.89</span><span class="dl">'</span>
<span class="nx">l10nDE</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="mf">1234567.89</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">1.234.567,89</span><span class="dl">'</span>
</code></pre></div>        </div>
      </li>
      <li>Currency Formatting
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l10nUSD</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">NumberFormat</span><span class="p">(</span><span class="dl">'</span><span class="s1">en-US</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">style</span><span class="p">:</span> <span class="dl">'</span><span class="s1">currency</span><span class="dl">'</span><span class="p">,</span> <span class="na">currency</span><span class="p">:</span> <span class="dl">'</span><span class="s1">USD</span><span class="dl">'</span><span class="p">})</span>
<span class="nx">l10nUSD</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="mf">100200300.4</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">$100,200,300.40</span><span class="dl">'</span>
</code></pre></div>        </div>
      </li>
      <li>Date/Time Formatting
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">l10nEN</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">(</span><span class="dl">'</span><span class="s1">en-US</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">l10nEN</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">'</span><span class="s1">2015-01-02</span><span class="dl">'</span><span class="p">))</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">1/2/2015</span><span class="dl">'</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

:ET